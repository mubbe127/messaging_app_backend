// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}


model User {
  id               Int            @id @default(autoincrement())
  firstname        String
  lastname         String
  email            String         @unique
  username         String         @unique
  password         String
  membershipStatus String         @default("basic")
  createdAt        DateTime       @default(now())
  updatedAt        DateTime       @updatedAt
  profileImage     String?
  
  adminOfChats     Chat[]         @relation("ChatOwners")
  memberOfChats    Chat[]         @relation("ChatMembers")
  messages         Message[]   
  files            File[]
  token            Token[]
}

model Chat {
   id               Int            @id @default(autoincrement())
   name             String?         
   createdAt        DateTime       @default(now())

   deletedAt        DateTime?
   admins           User[]         @relation("ChatOwners") 
   members          User[]         @relation("ChatMembers")
   messages         Message[]     


}

model Message {
  id               Int            @id @default(autoincrement())
  content          String
  createdAt        DateTime       @default(now())
  deletedAt        DateTime?
  chatId           Int
  userId           Int

  files            File[]         // Related files for this message
  chat             Chat           @relation(fields: [chatId], references: [id], onDelete: Cascade)
  user             User           @relation(fields: [userId], references: [id])
}


model File {
  id         Int      @id @default(autoincrement())
  fileName   String
  fileType   String
  fileSize   Int 
  filePath    String  // URL to the file (either local or cloud storage)
  messageId  Int     // Foreign key to the message this file is attached to
  userId     Int
  message    Message @relation(fields: [messageId], references: [id])
  user       User     @relation(fields: [userId], references: [id])
}

model Token {

  id                Int      @id @default(autoincrement())
  refreshToken      String?   
  userId            Int      

  user              User     @relation(fields: [userId], references: [id])
}
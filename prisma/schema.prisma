// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}


model User {
  id               Int            @id @default(autoincrement())
  firstname        String
  lastname         String
  email            String         @unique
  username         String         @unique
  password         String
  membershipStatus String         @default("basic")
  createdAt        DateTime       @default(now())
  updatedAt        DateTime       @updatedAt
  profileImage     Int?
  
  viewedMessages   Message[]      @relation("MessageViewers")
  adminOfChats     Chat[]         @relation("ChatOwners")
  memberOfChats    Chat[]         @relation("ChatMembers")
  messages         Message[]   
  files            File[]
  token            Token[]
}

model Chat {
   id               Int            @id @default(autoincrement())
   name             String?         
   communityChat    String?        @unique
   createdAt        DateTime       @default(now())
   updatedAt        DateTime       @updatedAt
   profileImage      Int?    
   deletedAt        DateTime?
   admins           User[]         @relation("ChatOwners") 
   members          User[]         @relation("ChatMembers")
   messages         Message[]     
   files            File[]


}

model Message {
  id               Int            @id @default(autoincrement())
  content          String
  createdAt        DateTime       @default(now())
  deletedAt        DateTime?
  chatId           Int
  userId           Int
  viewedBy         User[]         @relation("MessageViewers")
  files            File[]         // Related files for this message
  chat             Chat           @relation(fields: [chatId], references: [id], onDelete: Cascade)
  user             User           @relation(fields: [userId], references: [id])
}


model File {
  id         Int      @id @default(autoincrement())
  fileName   String
  fileType   String
  fileSize   Int 
  filePath   String?
  messageId  Int?     // Foreign key to the message this file is attached to
  userId     Int?
  chatId     Int?
  data       Bytes?
  chat       Chat?    @relation(fields: [chatId], references: [id])
  message    Message? @relation(fields: [messageId], references: [id])
  user       User?     @relation(fields: [userId], references: [id])
}

model Token {

  id                Int      @id @default(autoincrement())
  refreshToken      String?   
  userId            Int      

  user              User     @relation(fields: [userId], references: [id])
}